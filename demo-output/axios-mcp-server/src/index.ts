#!/usr/bin/env node

/**
 * MCP Server for axios
 * Generated automatically from package analysis
 * 
 * Package: axios@1.6.0
 * Description: Promise based HTTP client for the browser and node.js
 * Generated: 2025-08-11T12:00:39.267Z
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  ErrorCode,
  McpError
} from '@modelcontextprotocol/sdk/types.js';

class AxiosMCPServer {
  private server: Server;

  constructor() {
    this.server = new Server(
      {
        name: 'axios-mcp-server',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupToolHandlers();
    this.setupErrorHandling();
  }

  private setupToolHandlers() {
    // List available tools
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
        {
                "name": "get_package_info",
                "description": "Get comprehensive information about the axios package",
                "inputSchema": {
                        "type": "object",
                        "properties": {
                                "includeMetadata": {
                                        "type": "boolean",
                                        "description": "Include analysis metadata and completeness scores",
                                        "default": false
                                },
                                "includeDependencies": {
                                        "type": "boolean",
                                        "description": "Include package dependencies information",
                                        "default": false
                                }
                        },
                        "additionalProperties": false
                }
        },
        {
                "name": "get_usage_examples",
                "description": "Get usage examples and code samples for axios",
                "inputSchema": {
                        "type": "object",
                        "properties": {
                                "category": {
                                        "type": "string",
                                        "description": "Filter examples by category",
                                        "enum": [
                                                "advanced",
                                                "basic",
                                                "demo",
                                                "integration"
                                        ],
                                        "examples": [
                                                "advanced",
                                                "basic",
                                                "demo",
                                                "integration"
                                        ]
                                },
                                "language": {
                                        "type": "string",
                                        "description": "Filter examples by programming language",
                                        "enum": [
                                                "javascript",
                                                "js",
                                                "typescript"
                                        ],
                                        "examples": [
                                                "javascript",
                                                "js",
                                                "typescript"
                                        ]
                                },
                                "limit": {
                                        "type": "number",
                                        "description": "Maximum number of examples to return",
                                        "default": 10,
                                        "examples": [
                                                5,
                                                10,
                                                20
                                        ]
                                }
                        },
                        "additionalProperties": false
                }
        },
        {
                "name": "get_api_reference",
                "description": "Get API reference documentation for axios",
                "inputSchema": {
                        "type": "object",
                        "properties": {
                                "type": {
                                        "type": "string",
                                        "description": "Type of API elements to retrieve",
                                        "enum": [
                                                "functions",
                                                "classes",
                                                "interfaces",
                                                "types",
                                                "constants",
                                                "all"
                                        ],
                                        "default": "all",
                                        "examples": [
                                                "functions",
                                                "classes",
                                                "interfaces",
                                                "types",
                                                "constants",
                                                "all"
                                        ]
                                },
                                "search": {
                                        "type": "string",
                                        "description": "Search for specific API elements by name",
                                        "examples": [
                                                "create",
                                                "get",
                                                "set",
                                                "config"
                                        ]
                                },
                                "includeExamples": {
                                        "type": "boolean",
                                        "description": "Include usage examples for API elements",
                                        "default": true
                                }
                        },
                        "additionalProperties": false
                }
        },
        {
                "name": "search_package_docs",
                "description": "Search through axios documentation and examples",
                "inputSchema": {
                        "type": "object",
                        "properties": {
                                "query": {
                                        "type": "string",
                                        "description": "Search query for documentation content",
                                        "examples": [
                                                "installation",
                                                "configuration",
                                                "error handling",
                                                "async"
                                        ]
                                },
                                "type": {
                                        "type": "string",
                                        "description": "Type of documentation to search",
                                        "enum": [
                                                "readme",
                                                "examples",
                                                "types",
                                                "all"
                                        ],
                                        "default": "all"
                                },
                                "limit": {
                                        "type": "number",
                                        "description": "Maximum number of results to return",
                                        "default": 5,
                                        "examples": [
                                                3,
                                                5,
                                                10
                                        ]
                                }
                        },
                        "required": [
                                "query"
                        ],
                        "additionalProperties": false
                }
        },
        {
                "name": "get_configuration_guide",
                "description": "Get configuration options and setup guide for axios",
                "inputSchema": {
                        "type": "object",
                        "properties": {
                                "format": {
                                        "type": "string",
                                        "description": "Format for configuration information",
                                        "enum": [
                                                "markdown",
                                                "json",
                                                "typescript"
                                        ],
                                        "default": "markdown"
                                },
                                "includeExamples": {
                                        "type": "boolean",
                                        "description": "Include configuration examples",
                                        "default": true
                                }
                        },
                        "additionalProperties": false
                }
        }
]
      };
    });

    // Handle tool calls
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case 'get_package_info':
            return await this.getPackageInfo(args || {});
          case 'get_usage_examples':
            return await this.getUsageExamples(args || {});
          case 'get_api_reference':
            return await this.getApiReference(args || {});
          case 'search_package_docs':
            return await this.searchPackageDocs(args || {});
          case 'get_configuration_guide':
            return await this.getConfigurationGuide(args || {});
          
          default:
            throw new McpError(
              ErrorCode.MethodNotFound,
              `Unknown tool: ${name}`
            );
        }
      } catch (error) {
        if (error instanceof McpError) {
          throw error;
        }
        
        throw new McpError(
          ErrorCode.InternalError,
          `Error executing tool ${name}: ${error instanceof Error ? error.message : String(error)}`
        );
      }
    });
  }

  private setupErrorHandling() {
    this.server.onerror = (error) => {
      console.error('[MCP Server Error]', error);
    };

    process.on('SIGINT', async () => {
      console.log('\nShutting down MCP server...');
      await this.server.close();
      process.exit(0);
    });
  }

  // Tool implementations
  
  private async getPackageInfo(args: any) {
    
    const { includeMetadata = false, includeDependencies = false } = args;
    
    const packageInfo = {
      name: "axios",
      version: "1.6.0",
      description: "Promise based HTTP client for the browser and node.js",
      homepage: "https://axios-http.com",
      repository: "git+https://github.com/axios/axios.git",
      keywords: ["xhr","http","ajax","promise","node"],
      license: "MIT"
    };

    if (includeDependencies) {
      packageInfo.dependencies = {"form-data":"^4.0.0","proxy-from-env":"^1.1.0","follow-redirects":"^1.15.0"};
      packageInfo.peerDependencies = {};
    }

    let response = `# ${packageInfo.name} v${packageInfo.version}

${packageInfo.description}

**Repository:** ${packageInfo.repository}
**License:** ${packageInfo.license}
**Keywords:** ${packageInfo.keywords.join(', ')}`;

    if (includeMetadata) {
      const completeness = {"overall":95,"readme":80,"typeDefinitions":100,"examples":100,"apiReference":100};
      response += `

## Analysis Metadata
- **Overall Completeness:** ${completeness.overall}%
- **README Quality:** ${completeness.readme}%
- **Type Definitions:** ${completeness.typeDefinitions}%
- **Examples Available:** ${completeness.examples}%
- **API Reference:** ${completeness.apiReference}%`;
    }

    return {
      content: [
        {
          type: "text",
          text: response
        }
      ]
    };
  }
  private async getUsageExamples(args: any) {
    
    const { category, language, limit = 10 } = args;
    
    let examples = [];
    
    // Collect examples from README
    const readmeExamples = [{"title":"Code Example","description":"js example","code":"const axios = require('axios').default;\n\n// axios.<method> will now provide autocomplete and parameter typings","language":"js","imports":["axios"],"category":"basic"},{"title":"Code Example","description":"js example","code":"const axios = require('axios').default;\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}","language":"js","imports":["axios"],"category":"advanced"},{"title":"Code Example","description":"js example","code":"axios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"function getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"// Send a GET request (default method)\naxios('/user/12345');","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","language":"js","imports":[],"category":"integration"},{"title":"Code Example","description":"js example","code":"{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}","language":"js","imports":[],"category":"integration"},{"title":"Code Example","description":"js example","code":"axios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"axios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"const myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"axios.interceptors.request.use(function (config) {\n  config.headers.test = 'I am only a header!';\n  return config;\n}, null, { synchronous: true });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"function onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"axios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });","language":"js","imports":[],"category":"integration"},{"title":"Code Example","description":"js example","code":"axios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"axios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));","language":"js","imports":["qs"],"category":"basic"},{"title":"Code Example","description":"js example","code":"import qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);","language":"js","imports":["qs"],"category":"basic"},{"title":"Code Example","description":"js example","code":"const querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));","language":"js","imports":["querystring"],"category":"basic"},{"title":"Code Example","description":"js example","code":"{\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"var app = express();\n  \n  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies\n  \n  app.post('/', function (req, res, next) {\n     // echo body as JSON\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);","language":"js","imports":[],"category":"integration"},{"title":"Code Example","description":"js example","code":"const formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)","language":"js","imports":["form-data"],"category":"basic"},{"title":"Code Example","description":"js example","code":"import axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data})=> console.log(data));","language":"js","imports":["axios"],"category":"basic"},{"title":"Code Example","description":"js example","code":"const axios= require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data})=> console.log(data));","language":"js","imports":["axios","form-data"],"category":"basic"},{"title":"Code Example","description":"js example","code":"const obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const formData= new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"await axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0] \n});","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"await axios.postForm('https://httpbin.org/post', {\n  'files[]': document.querySelector('#fileInput').files \n});","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"await axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"await axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"await axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"{\n  \"foo\": \"1\",\n  \"deep\": {\n    \"prop\": {\n      \"spaced\": \"3\"\n    }\n  },\n  \"baz\": [\n    \"4\",\n    \"5\"\n  ],\n  \"user\": {\n    \"age\": \"value2\"\n  }\n}","language":"js","imports":[],"category":"basic"},{"title":"Usage Example","description":"typescript example","code":"let user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}","language":"typescript","imports":[],"category":"advanced"}];
    examples.push(...readmeExamples);
    
    // Collect examples from repository
    const repoExamples = [{"title":"examples/server.js","description":"Example from examples/server.js","code":"var fs = require('fs');\nvar path = require('path');\nvar http = require('http');\nvar argv = require('minimist')(process.argv.slice(2));\nvar server;\nvar dirs;\n\nfunction listDirs(root) {\n  var files = fs.readdirSync(root);\n  var dirs = [];\n\n  for (var i = 0, l = files.length; i < l; i++) {\n    var file = files[i];\n    if (file[0] !== '.') {\n      var stat = fs.statSync(path.join(root, file));\n      if (stat.isDirectory()) {\n        dirs.push(file);\n      }\n    }\n  }\n\n  return dirs;\n}\n\nfunction getIndexTemplate() {\n  var links = dirs.map(function (dir) {\n    var url = '/' + dir;\n    return '<li onclick=\"document.location=\\'' + url + '\\'\"><a href=\"' + url + '\">' + url + '</a></li>';\n  });\n\n  return (\n    '<!doctype html>' +\n    '<html>' +\n    '<head>' +\n    '<title>axios examples</title>' +\n    '<style>' +\n    'body {padding:25px;}' +\n    'ul {margin:0; padding:0; list-style:none;}' +\n    'li {padding:5px 10px;}' +\n    'li:hover {background:#eee; cursor:pointer;}' +\n    'a {text-decoration:none; color:#0080ff;}' +\n    '</style>' +\n    '<body>' +\n    '<ul>' +\n    links.join('') +\n    '</ul>'\n  );\n}\n\nfunction sendResponse(res, statusCode, body) {\n  res.writeHead(statusCode);\n  res.write(body);\n  res.end();\n}\n\nfunction send200(res, body) {\n  sendResponse(res, 200, body || '<h1>OK</h1>');\n}\n\nfunction send404(res, body) {\n  sendResponse(res, 404, body || '<h1>Not Found</h1>');\n}\n\nfunction pipeFileToResponse(res, file, type) {\n  if (type) {\n    res.writeHead(200, {\n      'Content-Type': type\n    });\n  }\n  fs.createReadStream(path.join(__dirname, file)).pipe(res);\n}\n\n\ndirs = listDirs(__dirname);\n\nserver = http.createServer(function (req, res) {\n  var url = req.url;\n\n  // Process axios itself\n  if (/axios\\.min\\.js$/.test(url)) {\n    pipeFileToResponse(res, '../dist/axios.min.js', 'text/javascript');\n    return;\n  }\n  if (/axios\\.min\\.map$/.test(url)) {\n    pipeFileToResponse(res, '../dist/axios.min.map', 'text/javascript');\n    return;\n  }\n  if (/axios\\.amd\\.min\\.js$/.test(url)) {\n    pipeFileToResponse(res, '../dist/axios.amd.min.js', 'text/javascript');\n    return;\n  }\n  if (/axios\\.amd\\.min\\.map$/.test(url)) {\n    pipeFileToResponse(res, '../dist/axios.amd.min.map', 'text/javascript');\n    return;\n  }\n\n  // Process /\n  if (url === '/' || url === '/index.html') {\n    send200(res, getIndexTemplate());\n    return;\n  }\n\n  // Format request */ -> */index.html\n  if (/\\/$/.test(url)) {\n    url += 'index.html';\n  }\n\n  // Format request /get -> /get/index.html\n  var parts = url.split('/');\n  if (dirs.indexOf(parts[parts.length - 1]) > -1) {\n    url += '/index.html';\n  }\n\n  // Process index.html request\n  if (/index\\.html$/.test(url)) {\n    if (fs.existsSync(path.join(__dirname, url))) {\n      pipeFileToResponse(res, url, 'text/html');\n    } else {\n      send404(res);\n    }\n  }\n\n  // Process server request\n  else if (new RegExp('(' + dirs.join('|') + ')\\/server').test(url)) {\n    if (fs.existsSync(path.join(__dirname, url + '.js'))) {\n      require(path.join(__dirname, url + '.js'))(req, res);\n    } else {\n      send404(res);\n    }\n  }\n  else {\n    send404(res);\n  }\n});\n\nconst PORT = argv.p || 3000;\n\nserver.listen(PORT, () => {\n  console.log(`Examples running on ${PORT}`); \n});\n","language":"javascript","category":"demo"}];
    examples.push(...repoExamples);

    // Apply filters
    if (category) {
      examples = examples.filter(ex => ex.category === category);
    }
    
    if (language) {
      examples = examples.filter(ex => ex.language === language);
    }
    
    // Limit results
    examples = examples.slice(0, limit);

    if (examples.length === 0) {
      return {
        content: [
          {
            type: "text",
            text: "No examples found matching the specified criteria."
          }
        ]
      };
    }

    const response = examples.map(ex => `## ${ex.title}

${ex.description}

\`\`\`${ex.language}
${ex.code}
\`\`\`
`).join('\n\n');

    return {
      content: [
        {
          type: "text",
          text: response
        }
      ]
    };
  }
  private async getApiReference(args: any) {
    
    const { type = 'all', search, includeExamples = true } = args;
    
    const apiRef = {"functions":[{"name":"getAdapter","signature":"getAdapter(adapters: AxiosAdapterConfig | AxiosAdapterConfig[] | undefined): AxiosAdapter","description":"","parameters":[{"name":"adapters","type":"AxiosAdapterConfig | AxiosAdapterConfig[] | undefined","description":"","optional":false}],"returnType":"AxiosAdapter","examples":[],"category":"getter"},{"name":"toFormData","signature":"toFormData(sourceObj: object, targetFormData?: GenericFormData, options?: FormSerializerOptions): GenericFormData","description":"","parameters":[{"name":"sourceObj","type":"object","description":"","optional":false},{"name":"targetFormData","type":"GenericFormData","description":"","optional":true},{"name":"options","type":"FormSerializerOptions","description":"","optional":true}],"returnType":"GenericFormData","examples":[],"category":"utility"},{"name":"formToJSON","signature":"formToJSON(form: GenericFormData|GenericHTMLFormElement): object","description":"","parameters":[{"name":"form","type":"GenericFormData|GenericHTMLFormElement","description":"","optional":false}],"returnType":"object","examples":[],"category":"utility"},{"name":"isCancel","signature":"isCancel(value: any): value is Cancel","description":"","parameters":[{"name":"value","type":"any","description":"","optional":false}],"returnType":"value is Cancel","examples":["const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');"],"category":"predicate"},{"name":"set","signature":"set(headerName?: string, value?: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"headerName","type":"string","description":"","optional":true},{"name":"value","type":"AxiosHeaderValue","description":"","optional":true},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","axios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });"],"category":"setter"},{"name":"set","signature":"set(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean): AxiosHeaders","description":"","parameters":[{"name":"headers","type":"RawAxiosHeaders | AxiosHeaders | string","description":"","optional":true},{"name":"rewrite","type":"boolean","description":"","optional":true}],"returnType":"AxiosHeaders","examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","axios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });"],"category":"setter"},{"name":"get","signature":"get(headerName: string, parser: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"headerName","type":"string","description":"","optional":false},{"name":"parser","type":"RegExp","description":"","optional":false}],"returnType":"RegExpExecArray | null","examples":["const axios = require('axios').default;\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}","function getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });","// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });","{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","axios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });","// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});","function onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });","axios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });","axios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})","axios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });","const controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()","const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');","const CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();","let user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}"],"category":"getter"},{"name":"get","signature":"get(headerName: string, matcher?: true | AxiosHeaderParser): AxiosHeaderValue","description":"","parameters":[{"name":"headerName","type":"string","description":"","optional":false},{"name":"matcher","type":"true | AxiosHeaderParser","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":["const axios = require('axios').default;\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}","function getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });","// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });","{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","axios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });","// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});","function onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });","axios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });","axios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})","axios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });","const controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()","const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');","const CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();","let user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}"],"category":"getter"},{"name":"has","signature":"has(header: string, matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"header","type":"string","description":"","optional":false},{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":["// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;"],"category":"predicate"},{"name":"delete","signature":"delete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"header","type":"string | string[]","description":"","optional":false},{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"utility"},{"name":"clear","signature":"clear(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":["const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses"],"category":"utility"},{"name":"normalize","signature":"normalize(format: boolean): AxiosHeaders","description":"","parameters":[{"name":"format","type":"boolean","description":"","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"utility"},{"name":"concat","signature":"concat(targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","parameters":[{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>","description":"","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"utility"},{"name":"toJSON","signature":"toJSON(asStrings?: boolean): RawAxiosHeaders","description":"","parameters":[{"name":"asStrings","type":"boolean","description":"","optional":true}],"returnType":"RawAxiosHeaders","examples":["axios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });"],"category":"utility"},{"name":"from","signature":"from(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders","description":"","parameters":[{"name":"thing","type":"AxiosHeaders | RawAxiosHeaders | string","description":"","optional":true}],"returnType":"AxiosHeaders","examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}","const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses","import qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);","import axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data})=> console.log(data));"],"category":"utility"},{"name":"accessor","signature":"accessor(header: string | string[]): AxiosHeaders","description":"","parameters":[{"name":"header","type":"string | string[]","description":"","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"utility"},{"name":"concat","signature":"concat(targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","parameters":[{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>","description":"","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"utility"},{"name":"setContentType","signature":"setContentType(value: ContentType, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"ContentType","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getContentType","signature":"getContentType(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getContentType","signature":"getContentType(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasContentType","signature":"hasContentType(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"setContentLength","signature":"setContentLength(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getContentLength","signature":"getContentLength(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getContentLength","signature":"getContentLength(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasContentLength","signature":"hasContentLength(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"setAccept","signature":"setAccept(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getAccept","signature":"getAccept(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getAccept","signature":"getAccept(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasAccept","signature":"hasAccept(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"setUserAgent","signature":"setUserAgent(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getUserAgent","signature":"getUserAgent(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getUserAgent","signature":"getUserAgent(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasUserAgent","signature":"hasUserAgent(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"setContentEncoding","signature":"setContentEncoding(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getContentEncoding","signature":"getContentEncoding(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getContentEncoding","signature":"getContentEncoding(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasContentEncoding","signature":"hasContentEncoding(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"setAuthorization","signature":"setAuthorization(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getAuthorization","signature":"getAuthorization(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getAuthorization","signature":"getAuthorization(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasAuthorization","signature":"hasAuthorization(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"new","signature":"new(message?: string): Cancel","description":"","parameters":[{"name":"message","type":"string","description":"","optional":true}],"returnType":"Cancel","examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","const controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()","const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');","const CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();","const params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);","const formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);","const FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)","const axios= require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data})=> console.log(data));","const formData= new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');"],"category":"utility"},{"name":"source","signature":"source(): CancelTokenSource","description":"","parameters":[],"returnType":"CancelTokenSource","examples":["const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');"],"category":"utility"},{"name":"throwIfRequested","signature":"throwIfRequested(): void","description":"","parameters":[],"returnType":"void","examples":[],"category":"action"},{"name":"eject","signature":"eject(id: number): void","description":"","parameters":[{"name":"id","type":"number","description":"","optional":false}],"returnType":"void","examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });","const myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);"],"category":"action"},{"name":"clear","signature":"clear(): void","description":"","parameters":[],"returnType":"void","examples":["const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses"],"category":"action"},{"name":"getUri","signature":"getUri(config?: AxiosRequestConfig): string","description":"","parameters":[{"name":"config","type":"AxiosRequestConfig","description":"","optional":true}],"returnType":"string","examples":[],"category":"getter"},{"name":"append","signature":"append(name: string, value: any, options?: any): any","description":"","parameters":[{"name":"name","type":"string","description":"","optional":false},{"name":"value","type":"any","description":"","optional":false},{"name":"options","type":"any","description":"","optional":true}],"returnType":"any","examples":["const params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);","const formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);","const FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)","const formData= new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');"],"category":"utility"},{"name":"submit","signature":"submit(): void","description":"","parameters":[],"returnType":"void","examples":[],"category":"action"},{"name":"getAdapter","signature":"getAdapter(adapters: AxiosAdapterConfig | AxiosAdapterConfig[] | undefined): AxiosAdapter","description":"","parameters":[{"name":"adapters","type":"AxiosAdapterConfig | AxiosAdapterConfig[] | undefined","description":"","optional":false}],"returnType":"AxiosAdapter","examples":[],"category":"getter"},{"name":"toFormData","signature":"toFormData(sourceObj: object, targetFormData?: GenericFormData, options?: FormSerializerOptions): GenericFormData","description":"","parameters":[{"name":"sourceObj","type":"object","description":"","optional":false},{"name":"targetFormData","type":"GenericFormData","description":"","optional":true},{"name":"options","type":"FormSerializerOptions","description":"","optional":true}],"returnType":"GenericFormData","examples":[],"category":"utility"},{"name":"formToJSON","signature":"formToJSON(form: GenericFormData|GenericHTMLFormElement): object","description":"","parameters":[{"name":"form","type":"GenericFormData|GenericHTMLFormElement","description":"","optional":false}],"returnType":"object","examples":[],"category":"utility"},{"name":"isCancel","signature":"isCancel(value: any): value is Cancel","description":"","parameters":[{"name":"value","type":"any","description":"","optional":false}],"returnType":"value is Cancel","examples":["const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');"],"category":"predicate"},{"name":"create","signature":"create(config?: CreateAxiosDefaults): AxiosInstance","description":"","parameters":[{"name":"config","type":"CreateAxiosDefaults","description":"","optional":true}],"returnType":"AxiosInstance","examples":["// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });","const instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});","// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;","// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});","const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses","const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});","const FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)"],"category":"factory"}],"classes":[{"name":"AxiosHeaders","description":"","constructor":{"name":"constructor","signature":"constructor(headers?: RawAxiosHeaders | AxiosHeaders | string): void","description":"","parameters":[{"name":"headers","type":"RawAxiosHeaders | AxiosHeaders | string","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"constructor"},"methods":[{"name":"set","signature":"set(headerName?: string, value?: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"headerName","type":"string","optional":true},{"name":"value","type":"AxiosHeaderValue","optional":true},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"set","signature":"set(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean): AxiosHeaders","description":"","parameters":[{"name":"headers","type":"RawAxiosHeaders | AxiosHeaders | string","optional":true},{"name":"rewrite","type":"boolean","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"get","signature":"get(headerName: string, parser: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"headerName","type":"string","optional":false},{"name":"parser","type":"RegExp","optional":false}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"get","signature":"get(headerName: string, matcher?: true | AxiosHeaderParser): AxiosHeaderValue","description":"","parameters":[{"name":"headerName","type":"string","optional":false},{"name":"matcher","type":"true | AxiosHeaderParser","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"has","signature":"has(header: string, matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"header","type":"string","optional":false},{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"delete","signature":"delete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"header","type":"string | string[]","optional":false},{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"clear","signature":"clear(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"normalize","signature":"normalize(format: boolean): AxiosHeaders","description":"","parameters":[{"name":"format","type":"boolean","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"concat","signature":"concat(targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","parameters":[{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"toJSON","signature":"toJSON(asStrings?: boolean): RawAxiosHeaders","description":"","parameters":[{"name":"asStrings","type":"boolean","optional":true}],"returnType":"RawAxiosHeaders","examples":[],"category":"method"},{"name":"from","signature":"from(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders","description":"","parameters":[{"name":"thing","type":"AxiosHeaders | RawAxiosHeaders | string","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"accessor","signature":"accessor(header: string | string[]): AxiosHeaders","description":"","parameters":[{"name":"header","type":"string | string[]","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"concat","signature":"concat(targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","parameters":[{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"setContentType","signature":"setContentType(value: ContentType, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"ContentType","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getContentType","signature":"getContentType(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getContentType","signature":"getContentType(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasContentType","signature":"hasContentType(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"setContentLength","signature":"setContentLength(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getContentLength","signature":"getContentLength(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getContentLength","signature":"getContentLength(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasContentLength","signature":"hasContentLength(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"setAccept","signature":"setAccept(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getAccept","signature":"getAccept(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getAccept","signature":"getAccept(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasAccept","signature":"hasAccept(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"setUserAgent","signature":"setUserAgent(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getUserAgent","signature":"getUserAgent(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getUserAgent","signature":"getUserAgent(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasUserAgent","signature":"hasUserAgent(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"setContentEncoding","signature":"setContentEncoding(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getContentEncoding","signature":"getContentEncoding(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getContentEncoding","signature":"getContentEncoding(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasContentEncoding","signature":"hasContentEncoding(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"setAuthorization","signature":"setAuthorization(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getAuthorization","signature":"getAuthorization(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getAuthorization","signature":"getAuthorization(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasAuthorization","signature":"hasAuthorization(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"}],"properties":[{"name":"headers","type":"RawAxiosHeaders | AxiosHeaders | string )","description":"","readonly":false},{"name":"key","type":"string]: any","description":"","readonly":false},{"name":"headerName","type":"string","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"headers","type":"RawAxiosHeaders | AxiosHeaders | string","description":"","readonly":false},{"name":"rewrite","type":"boolean): AxiosHeaders","description":"","readonly":false},{"name":"headerName","type":"string","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"headerName","type":"string","description":"","readonly":false},{"name":"matcher","type":"true | AxiosHeaderParser): AxiosHeaderValue","description":"","readonly":false},{"name":"header","type":"string","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"header","type":"string | string[]","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"format","type":"boolean): AxiosHeaders","description":"","readonly":false},{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","readonly":false},{"name":"asStrings","type":"boolean): RawAxiosHeaders","description":"","readonly":false},{"name":"thing","type":"AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders","description":"","readonly":false},{"name":"header","type":"string | string[]): AxiosHeaders","description":"","readonly":false},{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","readonly":false},{"name":"value","type":"ContentType","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false}],"examples":[]},{"name":"Axios","description":"","constructor":{"name":"constructor","signature":"constructor(config?: AxiosRequestConfig): void","description":"","parameters":[{"name":"config","type":"AxiosRequestConfig","optional":true}],"returnType":"Axios","examples":[],"category":"constructor"},"methods":[],"properties":[{"name":"config","type":"AxiosRequestConfig)","description":"","readonly":false},{"name":"defaults","type":"AxiosDefaults","description":"","readonly":false},{"name":"interceptors","type":"{ request: AxiosInterceptorManager<InternalAxiosRequestConfig>","description":"","readonly":false},{"name":"response","type":"AxiosInterceptorManager<AxiosResponse>","description":"","readonly":false}],"examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","let user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}"]}],"interfaces":[{"name":"RawAxiosHeaders","description":"","properties":[{"name":"key","type":"string]: AxiosHeaderValue","description":"","readonly":false}],"methods":[]},{"name":"AxiosRequestTransformer","description":"","properties":[{"name":"this","type":"InternalAxiosRequestConfig","description":"","readonly":false},{"name":"data","type":"any","description":"","readonly":false},{"name":"headers","type":"AxiosRequestHeaders): any","description":"","readonly":false}],"methods":[]},{"name":"AxiosResponseTransformer","description":"","properties":[{"name":"this","type":"InternalAxiosRequestConfig","description":"","readonly":false},{"name":"data","type":"any","description":"","readonly":false},{"name":"headers","type":"AxiosResponseHeaders","description":"","readonly":false},{"name":"status","type":"number): any","description":"","readonly":false}],"methods":[]},{"name":"AxiosAdapter","description":"","properties":[{"name":"config","type":"InternalAxiosRequestConfig): AxiosPromise","description":"","readonly":false}],"methods":[]},{"name":"AxiosBasicCredentials","description":"","properties":[{"name":"username","type":"string","description":"","readonly":false},{"name":"password","type":"string","description":"","readonly":false}],"methods":[]},{"name":"AxiosProxyConfig","description":"","properties":[{"name":"host","type":"string","description":"","readonly":false},{"name":"port","type":"number","description":"","readonly":false},{"name":"auth","type":"AxiosBasicCredentials","description":"","readonly":false},{"name":"protocol","type":"string","description":"","readonly":false}],"methods":[]},{"name":"TransitionalOptions","description":"","properties":[{"name":"silentJSONParsing","type":"boolean","description":"","readonly":false},{"name":"forcedJSONParsing","type":"boolean","description":"","readonly":false},{"name":"clarifyTimeoutError","type":"boolean","description":"","readonly":false}],"methods":[]},{"name":"GenericAbortSignal","description":"","properties":[{"name":"aborted","type":"boolean","description":"","readonly":false}],"methods":[]},{"name":"FormDataVisitorHelpers","description":"","properties":[{"name":"defaultVisitor","type":"SerializerVisitor","description":"","readonly":false}],"methods":[]},{"name":"SerializerVisitor","description":"","properties":[{"name":"this","type":"GenericFormData","description":"","readonly":false},{"name":"value","type":"any","description":"","readonly":false},{"name":"key","type":"string | number","description":"","readonly":false},{"name":"path","type":"null | Array<string | number>","description":"","readonly":false},{"name":"helpers","type":"FormDataVisitorHelpers ): boolean","description":"","readonly":false}],"methods":[]},{"name":"SerializerOptions","description":"","properties":[{"name":"visitor","type":"SerializerVisitor","description":"","readonly":false},{"name":"dots","type":"boolean","description":"","readonly":false},{"name":"metaTokens","type":"boolean","description":"","readonly":false},{"name":"indexes","type":"boolean | null","description":"","readonly":false}],"methods":[]},{"name":"FormSerializerOptions","description":"","properties":[],"methods":[]},{"name":"ParamEncoder","description":"","properties":[{"name":"value","type":"any","description":"","readonly":false}],"methods":[]},{"name":"CustomParamsSerializer","description":"","properties":[{"name":"params","type":"Record<string","description":"","readonly":false},{"name":"options","type":"ParamsSerializerOptions): string","description":"","readonly":false}],"methods":[]},{"name":"ParamsSerializerOptions","description":"","properties":[{"name":"encode","type":"ParamEncoder","description":"","readonly":false},{"name":"serialize","type":"CustomParamsSerializer","description":"","readonly":false}],"methods":[]},{"name":"AxiosProgressEvent","description":"","properties":[{"name":"loaded","type":"number","description":"","readonly":false},{"name":"total","type":"number","description":"","readonly":false},{"name":"progress","type":"number","description":"","readonly":false},{"name":"bytes","type":"number","description":"","readonly":false},{"name":"rate","type":"number","description":"","readonly":false},{"name":"estimated","type":"number","description":"","readonly":false},{"name":"upload","type":"boolean","description":"","readonly":false},{"name":"download","type":"boolean","description":"","readonly":false},{"name":"event","type":"BrowserProgressEvent","description":"","readonly":false}],"methods":[]},{"name":"LookupAddressEntry","description":"","properties":[{"name":"address","type":"string","description":"","readonly":false},{"name":"family","type":"AddressFamily","description":"","readonly":false}],"methods":[]},{"name":"HeadersDefaults","description":"","properties":[{"name":"common","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"delete","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"get","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"head","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"post","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"put","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"patch","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"options","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"purge","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"link","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"unlink","type":"RawAxiosRequestHeaders","description":"","readonly":false}],"methods":[]},{"name":"CancelStatic","description":"","properties":[{"name":"message","type":"string): Cancel","description":"","readonly":false}],"methods":[]},{"name":"Cancel","description":"","properties":[{"name":"message","type":"string | undefined","description":"","readonly":false}],"methods":[]},{"name":"Canceler","description":"","properties":[{"name":"message","type":"string","description":"","readonly":false},{"name":"config","type":"AxiosRequestConfig","description":"","readonly":false},{"name":"request","type":"any): void","description":"","readonly":false}],"methods":[]},{"name":"CancelTokenStatic","description":"","properties":[],"methods":[]},{"name":"CancelToken","description":"","properties":[{"name":"promise","type":"Promise<Cancel>","description":"","readonly":false},{"name":"reason","type":"Cancel","description":"","readonly":false}],"methods":[]},{"name":"CancelTokenSource","description":"","properties":[{"name":"token","type":"CancelToken","description":"","readonly":false},{"name":"cancel","type":"Canceler","description":"","readonly":false}],"methods":[]},{"name":"AxiosInterceptorOptions","description":"","properties":[{"name":"synchronous","type":"boolean","description":"","readonly":false}],"methods":[]},{"name":"AxiosInstance","description":"","properties":[{"name":"config","type":"AxiosRequestConfig<D>): Promise<R>","description":"","readonly":false},{"name":"url","type":"string","description":"","readonly":false},{"name":"config","type":"AxiosRequestConfig<D>): Promise<R>","description":"","readonly":false},{"name":"defaults","type":"Omit<AxiosDefaults","description":"","readonly":false},{"name":"headers","type":"HeadersDefaults & { [key: string]: AxiosHeaderValue","description":"","readonly":false}],"methods":[]},{"name":"GenericFormData","description":"","properties":[{"name":"name","type":"string","description":"","readonly":false},{"name":"value","type":"any","description":"","readonly":false},{"name":"options","type":"any): any","description":"","readonly":false}],"methods":[]},{"name":"GenericHTMLFormElement","description":"","properties":[{"name":"name","type":"string","description":"","readonly":false},{"name":"method","type":"string","description":"","readonly":false}],"methods":[]},{"name":"AxiosStatic","description":"","properties":[{"name":"config","type":"CreateAxiosDefaults): AxiosInstance","description":"","readonly":false},{"name":"Cancel","type":"CancelStatic","description":"","readonly":false},{"name":"CancelToken","type":"CancelTokenStatic","description":"","readonly":false},{"name":"Axios","type":"typeof Axios","description":"","readonly":false},{"name":"AxiosError","type":"typeof AxiosError","description":"","readonly":false},{"name":"HttpStatusCode","type":"typeof HttpStatusCode","description":"","readonly":false},{"name":"VERSION","type":"string","description":"","readonly":false},{"name":"isCancel","type":"typeof isCancel","description":"","readonly":false},{"name":"all","type":"typeof all","description":"","readonly":false},{"name":"spread","type":"typeof spread","description":"","readonly":false},{"name":"isAxiosError","type":"typeof isAxiosError","description":"","readonly":false},{"name":"toFormData","type":"typeof toFormData","description":"","readonly":false},{"name":"formToJSON","type":"typeof formToJSON","description":"","readonly":false},{"name":"getAdapter","type":"typeof getAdapter","description":"","readonly":false},{"name":"CanceledError","type":"typeof CanceledError","description":"","readonly":false},{"name":"AxiosHeaders","type":"typeof AxiosHeaders","description":"","readonly":false}],"methods":[]}],"types":[{"name":"AxiosHeaderValue","definition":"AxiosHeaders | string | string[] | number | boolean | null","description":"","examples":[]},{"name":"MethodsHeaders","definition":"Partial<{ [Key in Method as Lowercase<Key>]: AxiosHeaders","description":"","examples":[]},{"name":"AxiosHeaderMatcher","definition":"string | RegExp | ((this: AxiosHeaders, value: string, name: string) => boolean)","description":"","examples":[]},{"name":"AxiosHeaderParser","definition":"(this: AxiosHeaders, value: AxiosHeaderValue, header: string) => any","description":"","examples":[]},{"name":"CommonRequestHeadersList","definition":"'Accept' | 'Content-Length' | 'User-Agent' | 'Content-Encoding' | 'Authorization'","description":"","examples":[]},{"name":"ContentType","definition":"AxiosHeaderValue | 'text/html' | 'text/plain' | 'multipart/form-data' | 'application/json' | 'application/x-www-form-urlencoded' | 'application/octet-stream'","description":"","examples":[]},{"name":"RawAxiosRequestHeaders","definition":"Partial<RawAxiosHeaders & { [Key in CommonRequestHeadersList]: AxiosHeaderValue","description":"","examples":[]},{"name":"AxiosRequestHeaders","definition":"RawAxiosRequestHeaders & AxiosHeaders","description":"","examples":[]},{"name":"CommonResponseHeadersList","definition":"'Server' | 'Content-Type' | 'Content-Length' | 'Cache-Control'| 'Content-Encoding'","description":"","examples":[]},{"name":"RawCommonResponseHeaders","definition":"{ [Key in CommonResponseHeadersList]: AxiosHeaderValue","description":"","examples":[]},{"name":"RawAxiosResponseHeaders","definition":"Partial<RawAxiosHeaders & RawCommonResponseHeaders>","description":"","examples":[]},{"name":"AxiosResponseHeaders","definition":"RawAxiosResponseHeaders & AxiosHeaders","description":"","examples":[]},{"name":"Method","definition":"| 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'purge' | 'PURGE' | 'link' | 'LINK' | 'unlink' | 'UNLINK'","description":"","examples":[]},{"name":"ResponseType","definition":"| 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream'","description":"","examples":[]},{"name":"responseEncoding","definition":"| 'ascii' | 'ASCII' | 'ansi' | 'ANSI' | 'binary' | 'BINARY' | 'base64' | 'BASE64' | 'base64url' | 'BASE64URL' | 'hex' | 'HEX' | 'latin1' | 'LATIN1' | 'ucs-2' | 'UCS-2' | 'ucs2' | 'UCS2' | 'utf-8' | 'UTF-8' | 'utf8' | 'UTF8' | 'utf16le' | 'UTF16LE'","description":"","examples":[]},{"name":"MaxUploadRate","definition":"number","description":"","examples":[]},{"name":"MaxDownloadRate","definition":"number","description":"","examples":[]},{"name":"BrowserProgressEvent","definition":"any","description":"","examples":[]},{"name":"Milliseconds","definition":"number","description":"","examples":[]},{"name":"AxiosAdapterName","definition":"'xhr' | 'http' | string","description":"","examples":[]},{"name":"AxiosAdapterConfig","definition":"AxiosAdapter | AxiosAdapterName","description":"","examples":[]},{"name":"AddressFamily","definition":"4 | 6 | undefined","description":"","examples":[]},{"name":"LookupAddress","definition":"string | LookupAddressEntry","description":"","examples":[]}],"constants":[{"name":"axios","type":"unknown","value":"unknown","description":""}]};
    let sections = [];

    if (type === 'all' || type === 'functions') {
      if (apiRef.functions.length > 0) {
        let functions = apiRef.functions;
        if (search) {
          functions = functions.filter(f => f.name.toLowerCase().includes(search.toLowerCase()));
        }
        
        if (functions.length > 0) {
          sections.push('# Functions\n\n' + functions.map(f => 
            `## ${f.name}\n\n${f.description}\n\n**Signature:** \`${f.signature}\`\n\n**Parameters:**\n${f.parameters.map(p => `- \`${p.name}\` (${p.type}): ${p.description}`).join('\n')}`
          ).join('\n\n'));
        }
      }
    }

    if (type === 'all' || type === 'classes') {
      if (apiRef.classes.length > 0) {
        let classes = apiRef.classes;
        if (search) {
          classes = classes.filter(c => c.name.toLowerCase().includes(search.toLowerCase()));
        }
        
        if (classes.length > 0) {
          sections.push('# Classes\n\n' + classes.map(c => 
            `## ${c.name}\n\n${c.description}\n\n**Methods:**\n${c.methods.map(m => `- \`${m.signature}\``).join('\n')}`
          ).join('\n\n'));
        }
      }
    }

    if (type === 'all' || type === 'interfaces') {
      if (apiRef.interfaces.length > 0) {
        let interfaces = apiRef.interfaces;
        if (search) {
          interfaces = interfaces.filter(i => i.name.toLowerCase().includes(search.toLowerCase()));
        }
        
        if (interfaces.length > 0) {
          sections.push('# Interfaces\n\n' + interfaces.map(i => 
            `## ${i.name}\n\n${i.description}\n\n**Properties:**\n${i.properties.map(p => `- \`${p.name}\` (${p.type}): ${p.description}`).join('\n')}`
          ).join('\n\n'));
        }
      }
    }

    if (sections.length === 0) {
      return {
        content: [
          {
            type: "text",
            text: "No API reference information found matching the specified criteria."
          }
        ]
      };
    }

    return {
      content: [
        {
          type: "text",
          text: sections.join('\n\n---\n\n')
        }
      ]
    };
  }
  private async searchPackageDocs(args: any) {
    
    const { query, type = 'all', limit = 5 } = args;
    const searchTerm = query.toLowerCase();
    let results = [];

    if (type === 'all' || type === 'readme') {
      // Search README sections
      const sections = [{"title":"axios","level":1,"content":"axios\n[![npm version](https://img.shields.io/npm/v/axios.svg?style=flat-square)](https://www.npmjs.org/package/axios)\n[![CDNJS](https://img.shields.io/cdnjs/v/axios.svg?style=flat-square)](https://cdnjs.com/libraries/axios)\n![Build status](https://github.com/axios/axios/actions/workflows/ci.yml/badge.svg)\n[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/axios/axios) \n[![code coverage](https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square)](https://coveralls.io/r/mzabriskie/axios)\n[![install size](https://packagephobia.now.sh/badge?p=axios)](https://packagephobia.now.sh/result?p=axios)\n[![npm downloads](https://img.shields.io/npm/dm/axios.svg?style=flat-square)](https://npm-stat.com/charts.html?package=axios)\n[![gitter chat](https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square)](https://gitter.im/mzabriskie/axios)\n[![code helpers](https://www.codetriage.com/axios/axios/badges/users.svg)](https://www.codetriage.com/axios/axios)\n[![Known Vulnerabilities](https://snyk.io/test/npm/axios/badge.svg)](https://snyk.io/test/npm/axios)\n![npm bundle size](https://img.shields.io/bundlephobia/minzip/axios)\nPromise based HTTP client for the browser and node.js\nNew axios docs website: [click here](https://axios-http.com/)\n","subsections":[{"title":"Table of Contents","level":2,"content":"Table of Contents\n[Features](#features)\n[Browser Support](#browser-support)\n[Installing](#installing)\n[Example](#example)\n[Axios API](#axios-api)\n[Request method aliases](#request-method-aliases)\n[Concurrency 👎](#concurrency-deprecated)\n[Creating an instance](#creating-an-instance)\n[Instance methods](#instance-methods)\n[Request Config](#request-config)\n[Response Schema](#response-schema)\n[Config Defaults](#config-defaults)\n[Global axios defaults](#global-axios-defaults)\n[Custom instance defaults](#custom-instance-defaults)\n[Config order of precedence](#config-order-of-precedence)\n[Interceptors](#interceptors)\n[Multiple Interceptors](#multiple-interceptors)\n[Handling Errors](#handling-errors)\n[Cancellation](#cancellation)\n[AbortController](#abortcontroller)\n[CancelToken 👎](#canceltoken-deprecated)\n[Using application/x-www-form-urlencoded format](#using-applicationx-www-form-urlencoded-format)\n[URLSearchParams](#urlsearchparams)\n[Query string](#query-string-older-browsers)\n[🆕 Automatic serialization](#-automatic-serialization-to-urlsearchparams)\n[Using multipart/form-data format](#using-multipartform-data-format)\n[FormData](#formdata)\n[🆕 Automatic serialization](#-automatic-serialization-to-formdata)\n[Files Posting](#files-posting)\n[HTML Form Posting](#html-form-posting-browser)\n[Semver](#semver)\n[Promises](#promises)\n[TypeScript](#typescript)\n[Resources](#resources)\n[Credits](#credits)\n[License](#license)\n","subsections":[]},{"title":"Features","level":2,"content":"Features\nMake [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser\nMake [http](https://nodejs.org/api/http.html) requests from node.js\nSupports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\nIntercept request and response\nTransform request and response data\nCancel requests\nAutomatic transforms for JSON data\n🆕 Automatic data object serialization to `multipart/form-data` and `x-www-form-urlencoded` body encodings\nClient side support for protecting against [XSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery)\n","subsections":[]},{"title":"Browser Support","level":2,"content":"Browser Support\n![Chrome](https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_48x48.png)\n![Firefox](https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_48x48.png)\n![Safari](https://raw.githubusercontent.com/alrra/browser-logos/main/src/safari/safari_48x48.png)\n![Opera](https://raw.githubusercontent.com/alrra/browser-logos/main/src/opera/opera_48x48.png)\n![Edge](https://raw.githubusercontent.com/alrra/browser-logos/main/src/edge/edge_48x48.png)\n![IE](https://raw.githubusercontent.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png)\nLatest ✔\nLatest ✔\nLatest ✔\nLatest ✔\nLatest ✔\n11 ✔\n[![Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)](https://saucelabs.com/u/axios)\n","subsections":[]},{"title":"Installing","level":2,"content":"Installing\nUsing npm:\nUsing bower:\nUsing yarn:\nUsing pnpm:\nUsing jsDelivr CDN:\nUsing unpkg CDN:\n","subsections":[]},{"title":"Example","level":2,"content":"Example\n","subsections":[{"title":"note: CommonJS usage","level":3,"content":"note: CommonJS usage\nIn order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with `require()` use the following approach:\nPerforming a `GET` request\n**NOTE:** `async/await` is part of ECMAScript 2017 and is not supported in Internet\nExplorer and older browsers, so use with caution.\nPerforming a `POST` request\nPerforming multiple concurrent requests\n","subsections":[]}]},{"title":"axios API","level":2,"content":"axios API\nRequests can be made by passing the relevant config to `axios`.\n","subsections":[{"title":"axios(config)","level":5,"content":"axios(config)\n","subsections":[]},{"title":"axios(url[, config])","level":5,"content":"axios(url[, config])\n","subsections":[]},{"title":"Request method aliases","level":3,"content":"Request method aliases\nFor convenience, aliases have been provided for all common request methods.\n","subsections":[{"title":"axios.request(config)","level":5,"content":"axios.request(config)\n","subsections":[]},{"title":"axios.get(url[, config])","level":5,"content":"axios.get(url[, config])\n","subsections":[]},{"title":"axios.delete(url[, config])","level":5,"content":"axios.delete(url[, config])\n","subsections":[]},{"title":"axios.head(url[, config])","level":5,"content":"axios.head(url[, config])\n","subsections":[]},{"title":"axios.options(url[, config])","level":5,"content":"axios.options(url[, config])\n","subsections":[]},{"title":"axios.post(url[, data[, config]])","level":5,"content":"axios.post(url[, data[, config]])\n","subsections":[]},{"title":"axios.put(url[, data[, config]])","level":5,"content":"axios.put(url[, data[, config]])\n","subsections":[]},{"title":"axios.patch(url[, data[, config]])","level":5,"content":"axios.patch(url[, data[, config]])\n","subsections":[{"title":"NOTE","level":6,"content":"NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n","subsections":[]}]}]},{"title":"Concurrency (Deprecated)","level":3,"content":"Concurrency (Deprecated)\nPlease use `Promise.all` to replace the below functions.\nHelper functions for dealing with concurrent requests.\naxios.all(iterable)\naxios.spread(callback)\n","subsections":[]},{"title":"Creating an instance","level":3,"content":"Creating an instance\nYou can create a new instance of axios with a custom config.\n","subsections":[{"title":"axios.create([config])","level":5,"content":"axios.create([config])\n","subsections":[]}]},{"title":"Instance methods","level":3,"content":"Instance methods\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n","subsections":[{"title":"axios#request(config)","level":5,"content":"axios#request(config)\n","subsections":[]},{"title":"axios#get(url[, config])","level":5,"content":"axios#get(url[, config])\n","subsections":[]},{"title":"axios#delete(url[, config])","level":5,"content":"axios#delete(url[, config])\n","subsections":[]},{"title":"axios#head(url[, config])","level":5,"content":"axios#head(url[, config])\n","subsections":[]},{"title":"axios#options(url[, config])","level":5,"content":"axios#options(url[, config])\n","subsections":[]},{"title":"axios#post(url[, data[, config]])","level":5,"content":"axios#post(url[, data[, config]])\n","subsections":[]},{"title":"axios#put(url[, data[, config]])","level":5,"content":"axios#put(url[, data[, config]])\n","subsections":[]},{"title":"axios#patch(url[, data[, config]])","level":5,"content":"axios#patch(url[, data[, config]])\n","subsections":[]},{"title":"axios#getUri([config])","level":5,"content":"axios#getUri([config])\n","subsections":[]}]}]},{"title":"Request Config","level":2,"content":"Request Config\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n","subsections":[]},{"title":"Response Schema","level":2,"content":"Response Schema\nThe response for a request contains the following information.\nWhen using `then`, you will receive the response as follows:\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n","subsections":[]},{"title":"Config Defaults","level":2,"content":"Config Defaults\nYou can specify config defaults that will be applied to every request.\n","subsections":[{"title":"Global axios defaults","level":3,"content":"Global axios defaults\n","subsections":[]},{"title":"Custom instance defaults","level":3,"content":"Custom instance defaults\n","subsections":[]},{"title":"Config order of precedence","level":3,"content":"Config order of precedence\nConfig will be merged with an order of precedence. The order is library defaults found in [lib/defaults.js](https://github.com/axios/axios/blob/main/lib/defaults/index.js#L28), then `defaults` property of the instance, and finally `config` argument for the request. The latter will take precedence over the former. Here's an example.\n","subsections":[]}]},{"title":"Interceptors","level":2,"content":"Interceptors\nYou can intercept requests or responses before they are handled by `then` or `catch`.\nIf you need to remove an interceptor later you can.\nYou can also clear all interceptors for requests or responses.\nYou can add interceptors to a custom instance of axios.\nWhen you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay\nin the execution of your axios request when the main thread is blocked (a promise is created under the hood for \nthe interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag\nto the options object that will tell axios to run the code synchronously and avoid any delays in request execution.\nIf you want to execute a particular interceptor based on a runtime check, \nyou can add a `runWhen` function to the options object. The interceptor will not be executed **if and only if** the return\nof `runWhen` is `false`. The function will be called with the config\nobject (don't forget that you can bind your own arguments to it as well.) This can be handy when you have an\nasynchronous request interceptor that only needs to run at certain times.\n","subsections":[{"title":"Multiple Interceptors","level":3,"content":"Multiple Interceptors\nGiven you add multiple response interceptors\nand when the response was fulfilled\nthen each interceptor is executed\nthen they are executed in the order they were added\nthen only the last interceptor's result is returned\nthen every interceptor receives the result of its predecessor\nand when the fulfillment-interceptor throws\nthen the following fulfillment-interceptor is not called\nthen the following rejection-interceptor is called\nonce caught, another following fulfill-interceptor is called again (just like in a promise chain).\nRead [the interceptor tests](./test/specs/interceptors.spec.js) for seeing all this in code.\n","subsections":[]}]},{"title":"Handling Errors","level":2,"content":"Handling Errors\nUsing the `validateStatus` config option, you can define HTTP code(s) that should throw an error.\nUsing `toJSON` you get an object with more information about the HTTP error.\n","subsections":[]},{"title":"Cancellation","level":2,"content":"Cancellation\n","subsections":[{"title":"AbortController","level":3,"content":"AbortController\nStarting from `v0.22.0` Axios supports AbortController to cancel requests in fetch API way:\n","subsections":[]},{"title":"CancelToken `👎deprecated`","level":3,"content":"CancelToken `👎deprecated`\nYou can also cancel a request using a *CancelToken*.\nThe axios cancel token API is based on the withdrawn [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\nThis API is deprecated since v0.22.0 and shouldn't be used in new projects\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\nNote: you can cancel several requests with the same cancel token/abort controller.\nIf a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.\nDuring the transition period, you can use both cancellation APIs, even for the same request:\n","subsections":[]}]},{"title":"Using `application/x-www-form-urlencoded` format","level":2,"content":"Using `application/x-www-form-urlencoded` format\n","subsections":[{"title":"URLSearchParams","level":3,"content":"URLSearchParams\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the [`application/x-www-form-urlencoded` format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) instead, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API, which is [supported](http://www.caniuse.com/#feat=urlsearchparams) in the vast majority of browsers, [and Node](https://nodejs.org/api/url.html#url_class_urlsearchparams) starting with v10 (released in 2018).\n","subsections":[]},{"title":"Query string (Older browsers)","level":3,"content":"Query string (Older browsers)\nFor compatibility with very old browsers, there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\nOr in another way (ES6),\n","subsections":[]},{"title":"Older Node.js versions","level":3,"content":"Older Node.js versions\nFor older Node.js engines, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\nNOTE: \nThe `qs` library is preferable if you need to stringify nested objects, as the `querystring` method has [known issues](https://github.com/nodejs/node-v0.x-archive/issues/1665) with that use case.\n","subsections":[]},{"title":"🆕 Automatic serialization to URLSearchParams","level":3,"content":"🆕 Automatic serialization to URLSearchParams\nAxios will automatically serialize the data object to urlencoded format if the content-type header is set to \"application/x-www-form-urlencoded\".\nThe server will handle it as\nIf your backend body-parser (like `body-parser` of `express.js`) supports nested objects decoding, you will get the same object on the server-side automatically\n","subsections":[]}]},{"title":"Using `multipart/form-data` format","level":2,"content":"Using `multipart/form-data` format\n","subsections":[{"title":"FormData","level":3,"content":"FormData\nTo send the data as a `multipart/formdata` you need to pass a formData instance as a payload. \nSetting the `Content-Type` header is not required as Axios guesses it based on the payload type.\nIn node.js, you can use the [`form-data`](https://github.com/form-data/form-data) library as follows:\n","subsections":[]},{"title":"🆕 Automatic serialization to FormData","level":3,"content":"🆕 Automatic serialization to FormData\nStarting from `v0.27.0`, Axios supports automatic object serialization to a FormData object if the request `Content-Type` \nheader is set to `multipart/form-data`.\nThe following request will submit the data in a FormData format (Browser & Node.js):\nIn the `node.js` build, the ([`form-data`](https://github.com/form-data/form-data)) polyfill is used by default.\nYou can overload the FormData class by setting the `env.FormData` config variable,\nbut you probably won't need it in most cases:\nAxios FormData serializer supports some special endings to perform the following operations:\n`{}` - serialize the value with JSON.stringify\n`[]` - unwrap the array-like object as separate fields with the same key\nNOTE: \nunwrap/expand operation will be used by default on arrays and FileList objects\nFormData serializer supports additional options via `config.formSerializer: object` property to handle rare cases:\n`visitor: Function` - user-defined visitor function that will be called recursively to serialize the data object\nto a `FormData` object by following custom rules.\n`dots: boolean = false` - use dot notation instead of brackets to serialize arrays and objects;\n`metaTokens: boolean = true` - add the special ending (e.g `user{}: '{\"name\": \"John\"}'`) in the FormData key. \nThe back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.\n`indexes: null|false|true = false` - controls how indexes will be added to unwrapped keys of `flat` array-like objects\n`null` - don't add brackets (`arr: 1`, `arr: 2`, `arr: 3`)\n`false`(default) - add empty brackets (`arr[]: 1`, `arr[]: 2`, `arr[]: 3`)\n`true` - add brackets with indexes  (`arr[0]: 1`, `arr[1]: 2`, `arr[2]: 3`)\nLet's say we have an object like this one:\nThe following steps will be executed by the Axios serializer internally:\nAxios supports the following shortcut methods: `postForm`, `putForm`, `patchForm`\nwhich are just the corresponding http methods with the `Content-Type` header preset to `multipart/form-data`.\n","subsections":[]}]},{"title":"Files Posting","level":2,"content":"Files Posting\nYou can easily sumbit a single file\nor multiple files as `multipart/form-data`.\n`FileList` object can be passed directly:\nAll files will be sent with the same field names: `files[]`.\n","subsections":[]},{"title":"🆕 HTML Form Posting (browser)","level":2,"content":"🆕 HTML Form Posting (browser)\nPass HTML Form element as a payload to submit it as `multipart/form-data` content.\n`FormData` and `HTMLForm` objects can also be posted as `JSON` by explicitly setting the `Content-Type` header to `application/json`:\nFor example, the Form\nwill be submitted as the following JSON object:\nSending `Blobs`/`Files` as JSON (`base64`) is not currently supported.\n","subsections":[]},{"title":"Semver","level":2,"content":"Semver\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n","subsections":[]},{"title":"Promises","level":2,"content":"Promises\naxios depends on a native ES6 Promise implementation to be [supported](https://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n","subsections":[]},{"title":"TypeScript","level":2,"content":"TypeScript\naxios includes [TypeScript](https://typescriptlang.org) definitions and a type guard for axios errors.\n","subsections":[]},{"title":"Online one-click setup","level":2,"content":"Online one-click setup\nYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/axios/axios/blob/main/examples/server.js)\n","subsections":[]},{"title":"Resources","level":2,"content":"Resources\n[Changelog](https://github.com/axios/axios/blob/main/CHANGELOG.md)\n[Upgrade Guide](https://github.com/axios/axios/blob/main/UPGRADE_GUIDE.md)\n[Ecosystem](https://github.com/axios/axios/blob/main/ECOSYSTEM.md)\n[Contributing Guide](https://github.com/axios/axios/blob/main/CONTRIBUTING.md)\n[Code of Conduct](https://github.com/axios/axios/blob/main/CODE_OF_CONDUCT.md)\n","subsections":[]},{"title":"Credits","level":2,"content":"Credits\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [AngularJS](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of AngularJS.\n","subsections":[]},{"title":"License","level":2,"content":"License\n[MIT](LICENSE)\n","subsections":[]}]}];
      for (const section of sections) {
        if (section.title.toLowerCase().includes(searchTerm) || 
            section.content.toLowerCase().includes(searchTerm)) {
          results.push({
            type: 'README Section',
            title: section.title,
            content: section.content.substring(0, 200) + '...',
            relevance: this.calculateRelevance(section.title + ' ' + section.content, searchTerm)
          });
        }
      }
    }

    if (type === 'all' || type === 'examples') {
      // Search usage examples
      const examples = [{"title":"Code Example","description":"js example","code":"const axios = require('axios').default;\n\n// axios.<method> will now provide autocomplete and parameter typings","language":"js","imports":["axios"],"category":"basic"},{"title":"Code Example","description":"js example","code":"const axios = require('axios').default;\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}","language":"js","imports":["axios"],"category":"advanced"},{"title":"Code Example","description":"js example","code":"axios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"function getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"// Send a GET request (default method)\naxios('/user/12345');","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","language":"js","imports":[],"category":"integration"},{"title":"Code Example","description":"js example","code":"{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}","language":"js","imports":[],"category":"integration"},{"title":"Code Example","description":"js example","code":"axios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"axios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"const myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"axios.interceptors.request.use(function (config) {\n  config.headers.test = 'I am only a header!';\n  return config;\n}, null, { synchronous: true });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"function onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"axios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });","language":"js","imports":[],"category":"integration"},{"title":"Code Example","description":"js example","code":"axios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"axios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));","language":"js","imports":["qs"],"category":"basic"},{"title":"Code Example","description":"js example","code":"import qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);","language":"js","imports":["qs"],"category":"basic"},{"title":"Code Example","description":"js example","code":"const querystring = require('querystring');\naxios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));","language":"js","imports":["querystring"],"category":"basic"},{"title":"Code Example","description":"js example","code":"{\n    x: '1',\n    'arr[]': [ '1', '2', '3' ],\n    'arr2[0]': '1',\n    'arr2[1][0]': '2',\n    'arr2[2]': '3',\n    'arr3[]': [ '1', '2', '3' ],\n    'users[0][name]': 'Peter',\n    'users[0][surname]': 'griffin',\n    'users[1][name]': 'Thomas',\n    'users[1][surname]': 'Anderson'\n  }","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"var app = express();\n  \n  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies\n  \n  app.post('/', function (req, res, next) {\n     // echo body as JSON\n     res.send(JSON.stringify(req.body));\n  });\n\n  server = app.listen(3000);","language":"js","imports":[],"category":"integration"},{"title":"Code Example","description":"js example","code":"const formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)","language":"js","imports":["form-data"],"category":"basic"},{"title":"Code Example","description":"js example","code":"import axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data})=> console.log(data));","language":"js","imports":["axios"],"category":"basic"},{"title":"Code Example","description":"js example","code":"const axios= require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data})=> console.log(data));","language":"js","imports":["axios","form-data"],"category":"basic"},{"title":"Code Example","description":"js example","code":"const obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"const formData= new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');","language":"js","imports":[],"category":"basic"},{"title":"Code Example","description":"js example","code":"await axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0] \n});","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"await axios.postForm('https://httpbin.org/post', {\n  'files[]': document.querySelector('#fileInput').files \n});","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"await axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"await axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"await axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})","language":"js","imports":[],"category":"advanced"},{"title":"Code Example","description":"js example","code":"{\n  \"foo\": \"1\",\n  \"deep\": {\n    \"prop\": {\n      \"spaced\": \"3\"\n    }\n  },\n  \"baz\": [\n    \"4\",\n    \"5\"\n  ],\n  \"user\": {\n    \"age\": \"value2\"\n  }\n}","language":"js","imports":[],"category":"basic"},{"title":"Usage Example","description":"typescript example","code":"let user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}","language":"typescript","imports":[],"category":"advanced"}];
      for (const example of examples) {
        if (example.title.toLowerCase().includes(searchTerm) || 
            example.code.toLowerCase().includes(searchTerm)) {
          results.push({
            type: 'Usage Example',
            title: example.title,
            content: example.code.substring(0, 200) + '...',
            relevance: this.calculateRelevance(example.title + ' ' + example.code, searchTerm)
          });
        }
      }
    }

    if (type === 'all' || type === 'types') {
      // Search API reference
      const apiRef = {"functions":[{"name":"getAdapter","signature":"getAdapter(adapters: AxiosAdapterConfig | AxiosAdapterConfig[] | undefined): AxiosAdapter","description":"","parameters":[{"name":"adapters","type":"AxiosAdapterConfig | AxiosAdapterConfig[] | undefined","description":"","optional":false}],"returnType":"AxiosAdapter","examples":[],"category":"getter"},{"name":"toFormData","signature":"toFormData(sourceObj: object, targetFormData?: GenericFormData, options?: FormSerializerOptions): GenericFormData","description":"","parameters":[{"name":"sourceObj","type":"object","description":"","optional":false},{"name":"targetFormData","type":"GenericFormData","description":"","optional":true},{"name":"options","type":"FormSerializerOptions","description":"","optional":true}],"returnType":"GenericFormData","examples":[],"category":"utility"},{"name":"formToJSON","signature":"formToJSON(form: GenericFormData|GenericHTMLFormElement): object","description":"","parameters":[{"name":"form","type":"GenericFormData|GenericHTMLFormElement","description":"","optional":false}],"returnType":"object","examples":[],"category":"utility"},{"name":"isCancel","signature":"isCancel(value: any): value is Cancel","description":"","parameters":[{"name":"value","type":"any","description":"","optional":false}],"returnType":"value is Cancel","examples":["const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');"],"category":"predicate"},{"name":"set","signature":"set(headerName?: string, value?: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"headerName","type":"string","description":"","optional":true},{"name":"value","type":"AxiosHeaderValue","description":"","optional":true},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","axios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });"],"category":"setter"},{"name":"set","signature":"set(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean): AxiosHeaders","description":"","parameters":[{"name":"headers","type":"RawAxiosHeaders | AxiosHeaders | string","description":"","optional":true},{"name":"rewrite","type":"boolean","description":"","optional":true}],"returnType":"AxiosHeaders","examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","axios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });"],"category":"setter"},{"name":"get","signature":"get(headerName: string, parser: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"headerName","type":"string","description":"","optional":false},{"name":"parser","type":"RegExp","description":"","optional":false}],"returnType":"RegExpExecArray | null","examples":["const axios = require('axios').default;\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}","function getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });","// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });","{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","axios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });","// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});","function onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });","axios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });","axios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})","axios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });","const controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()","const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');","const CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();","let user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}"],"category":"getter"},{"name":"get","signature":"get(headerName: string, matcher?: true | AxiosHeaderParser): AxiosHeaderValue","description":"","parameters":[{"name":"headerName","type":"string","description":"","optional":false},{"name":"matcher","type":"true | AxiosHeaderParser","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":["const axios = require('axios').default;\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  })\n  .then(function () {\n    // always executed\n  });  \n\n// Want to use async/await? Add the `async` keyword to your outer function/method.\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}","function getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });","// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });","{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","axios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });","// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});","function onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });","axios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });","axios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})","axios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });","const controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()","const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');","const CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();","let user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}"],"category":"getter"},{"name":"has","signature":"has(header: string, matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"header","type":"string","description":"","optional":false},{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":["// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;"],"category":"predicate"},{"name":"delete","signature":"delete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"header","type":"string | string[]","description":"","optional":false},{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"utility"},{"name":"clear","signature":"clear(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":["const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses"],"category":"utility"},{"name":"normalize","signature":"normalize(format: boolean): AxiosHeaders","description":"","parameters":[{"name":"format","type":"boolean","description":"","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"utility"},{"name":"concat","signature":"concat(targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","parameters":[{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>","description":"","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"utility"},{"name":"toJSON","signature":"toJSON(asStrings?: boolean): RawAxiosHeaders","description":"","parameters":[{"name":"asStrings","type":"boolean","description":"","optional":true}],"returnType":"RawAxiosHeaders","examples":["axios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });"],"category":"utility"},{"name":"from","signature":"from(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders","description":"","parameters":[{"name":"thing","type":"AxiosHeaders | RawAxiosHeaders | string","description":"","optional":true}],"returnType":"AxiosHeaders","examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}","const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses","import qs from 'qs';\nconst data = { 'bar': 123 };\nconst options = {\n  method: 'POST',\n  headers: { 'content-type': 'application/x-www-form-urlencoded' },\n  data: qs.stringify(data),\n  url,\n};\naxios(options);","import axios from 'axios';\n\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data})=> console.log(data));"],"category":"utility"},{"name":"accessor","signature":"accessor(header: string | string[]): AxiosHeaders","description":"","parameters":[{"name":"header","type":"string | string[]","description":"","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"utility"},{"name":"concat","signature":"concat(targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","parameters":[{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>","description":"","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"utility"},{"name":"setContentType","signature":"setContentType(value: ContentType, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"ContentType","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getContentType","signature":"getContentType(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getContentType","signature":"getContentType(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasContentType","signature":"hasContentType(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"setContentLength","signature":"setContentLength(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getContentLength","signature":"getContentLength(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getContentLength","signature":"getContentLength(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasContentLength","signature":"hasContentLength(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"setAccept","signature":"setAccept(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getAccept","signature":"getAccept(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getAccept","signature":"getAccept(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasAccept","signature":"hasAccept(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"setUserAgent","signature":"setUserAgent(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getUserAgent","signature":"getUserAgent(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getUserAgent","signature":"getUserAgent(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasUserAgent","signature":"hasUserAgent(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"setContentEncoding","signature":"setContentEncoding(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getContentEncoding","signature":"getContentEncoding(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getContentEncoding","signature":"getContentEncoding(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasContentEncoding","signature":"hasContentEncoding(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"setAuthorization","signature":"setAuthorization(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","description":"","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"setter"},{"name":"getAuthorization","signature":"getAuthorization(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","description":"","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"getter"},{"name":"getAuthorization","signature":"getAuthorization(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"getter"},{"name":"hasAuthorization","signature":"hasAuthorization(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","description":"","optional":true}],"returnType":"boolean","examples":[],"category":"predicate"},{"name":"new","signature":"new(message?: string): Cancel","description":"","parameters":[{"name":"message","type":"string","description":"","optional":true}],"returnType":"Cancel","examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","const controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()","const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');","const CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();","const params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);","const formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);","const FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)","const axios= require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data})=> console.log(data));","const formData= new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');"],"category":"utility"},{"name":"source","signature":"source(): CancelTokenSource","description":"","parameters":[],"returnType":"CancelTokenSource","examples":["const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');"],"category":"utility"},{"name":"throwIfRequested","signature":"throwIfRequested(): void","description":"","parameters":[],"returnType":"void","examples":[],"category":"action"},{"name":"eject","signature":"eject(id: number): void","description":"","parameters":[{"name":"id","type":"number","description":"","optional":false}],"returnType":"void","examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });","const myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);"],"category":"action"},{"name":"clear","signature":"clear(): void","description":"","parameters":[],"returnType":"void","examples":["const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses"],"category":"action"},{"name":"getUri","signature":"getUri(config?: AxiosRequestConfig): string","description":"","parameters":[{"name":"config","type":"AxiosRequestConfig","description":"","optional":true}],"returnType":"string","examples":[],"category":"getter"},{"name":"append","signature":"append(name: string, value: any, options?: any): any","description":"","parameters":[{"name":"name","type":"string","description":"","optional":false},{"name":"value","type":"any","description":"","optional":false},{"name":"options","type":"any","description":"","optional":true}],"returnType":"any","examples":["const params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);","const formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);","const FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)","const formData= new FormData();\nformData.append('x', '1');\nformData.append('arr[]', '1');\nformData.append('arr[]', '2');\nformData.append('arr[]', '3');\nformData.append('arr2[0]', '1');\nformData.append('arr2[1][0]', '2');\nformData.append('arr2[2]', '3');\nformData.append('users[0][name]', 'Peter');\nformData.append('users[0][surname]', 'Griffin');\nformData.append('users[1][name]', 'Thomas');\nformData.append('users[1][surname]', 'Anderson');\nformData.append('obj2{}', '[{\"x\":1}]');"],"category":"utility"},{"name":"submit","signature":"submit(): void","description":"","parameters":[],"returnType":"void","examples":[],"category":"action"},{"name":"getAdapter","signature":"getAdapter(adapters: AxiosAdapterConfig | AxiosAdapterConfig[] | undefined): AxiosAdapter","description":"","parameters":[{"name":"adapters","type":"AxiosAdapterConfig | AxiosAdapterConfig[] | undefined","description":"","optional":false}],"returnType":"AxiosAdapter","examples":[],"category":"getter"},{"name":"toFormData","signature":"toFormData(sourceObj: object, targetFormData?: GenericFormData, options?: FormSerializerOptions): GenericFormData","description":"","parameters":[{"name":"sourceObj","type":"object","description":"","optional":false},{"name":"targetFormData","type":"GenericFormData","description":"","optional":true},{"name":"options","type":"FormSerializerOptions","description":"","optional":true}],"returnType":"GenericFormData","examples":[],"category":"utility"},{"name":"formToJSON","signature":"formToJSON(form: GenericFormData|GenericHTMLFormElement): object","description":"","parameters":[{"name":"form","type":"GenericFormData|GenericHTMLFormElement","description":"","optional":false}],"returnType":"object","examples":[],"category":"utility"},{"name":"isCancel","signature":"isCancel(value: any): value is Cancel","description":"","parameters":[{"name":"value","type":"any","description":"","optional":false}],"returnType":"value is Cancel","examples":["const CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');"],"category":"predicate"},{"name":"create","signature":"create(config?: CreateAxiosDefaults): AxiosInstance","description":"","parameters":[{"name":"config","type":"CreateAxiosDefaults","description":"","optional":true}],"returnType":"AxiosInstance","examples":["// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });","const instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});","// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;","// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});","const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses","const instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});","const FormData = require('form-data');\n \nconst form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\naxios.post('https://example.com', form)"],"category":"factory"}],"classes":[{"name":"AxiosHeaders","description":"","constructor":{"name":"constructor","signature":"constructor(headers?: RawAxiosHeaders | AxiosHeaders | string): void","description":"","parameters":[{"name":"headers","type":"RawAxiosHeaders | AxiosHeaders | string","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"constructor"},"methods":[{"name":"set","signature":"set(headerName?: string, value?: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"headerName","type":"string","optional":true},{"name":"value","type":"AxiosHeaderValue","optional":true},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"set","signature":"set(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean): AxiosHeaders","description":"","parameters":[{"name":"headers","type":"RawAxiosHeaders | AxiosHeaders | string","optional":true},{"name":"rewrite","type":"boolean","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"get","signature":"get(headerName: string, parser: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"headerName","type":"string","optional":false},{"name":"parser","type":"RegExp","optional":false}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"get","signature":"get(headerName: string, matcher?: true | AxiosHeaderParser): AxiosHeaderValue","description":"","parameters":[{"name":"headerName","type":"string","optional":false},{"name":"matcher","type":"true | AxiosHeaderParser","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"has","signature":"has(header: string, matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"header","type":"string","optional":false},{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"delete","signature":"delete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"header","type":"string | string[]","optional":false},{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"clear","signature":"clear(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"normalize","signature":"normalize(format: boolean): AxiosHeaders","description":"","parameters":[{"name":"format","type":"boolean","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"concat","signature":"concat(targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","parameters":[{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"toJSON","signature":"toJSON(asStrings?: boolean): RawAxiosHeaders","description":"","parameters":[{"name":"asStrings","type":"boolean","optional":true}],"returnType":"RawAxiosHeaders","examples":[],"category":"method"},{"name":"from","signature":"from(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders","description":"","parameters":[{"name":"thing","type":"AxiosHeaders | RawAxiosHeaders | string","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"accessor","signature":"accessor(header: string | string[]): AxiosHeaders","description":"","parameters":[{"name":"header","type":"string | string[]","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"concat","signature":"concat(targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","parameters":[{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>","optional":false}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"setContentType","signature":"setContentType(value: ContentType, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"ContentType","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getContentType","signature":"getContentType(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getContentType","signature":"getContentType(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasContentType","signature":"hasContentType(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"setContentLength","signature":"setContentLength(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getContentLength","signature":"getContentLength(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getContentLength","signature":"getContentLength(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasContentLength","signature":"hasContentLength(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"setAccept","signature":"setAccept(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getAccept","signature":"getAccept(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getAccept","signature":"getAccept(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasAccept","signature":"hasAccept(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"setUserAgent","signature":"setUserAgent(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getUserAgent","signature":"getUserAgent(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getUserAgent","signature":"getUserAgent(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasUserAgent","signature":"hasUserAgent(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"setContentEncoding","signature":"setContentEncoding(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getContentEncoding","signature":"getContentEncoding(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getContentEncoding","signature":"getContentEncoding(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasContentEncoding","signature":"hasContentEncoding(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"},{"name":"setAuthorization","signature":"setAuthorization(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","parameters":[{"name":"value","type":"AxiosHeaderValue","optional":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaders","examples":[],"category":"method"},{"name":"getAuthorization","signature":"getAuthorization(parser?: RegExp): RegExpExecArray | null","description":"","parameters":[{"name":"parser","type":"RegExp","optional":true}],"returnType":"RegExpExecArray | null","examples":[],"category":"method"},{"name":"getAuthorization","signature":"getAuthorization(matcher?: AxiosHeaderMatcher): AxiosHeaderValue","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"AxiosHeaderValue","examples":[],"category":"method"},{"name":"hasAuthorization","signature":"hasAuthorization(matcher?: AxiosHeaderMatcher): boolean","description":"","parameters":[{"name":"matcher","type":"AxiosHeaderMatcher","optional":true}],"returnType":"boolean","examples":[],"category":"method"}],"properties":[{"name":"headers","type":"RawAxiosHeaders | AxiosHeaders | string )","description":"","readonly":false},{"name":"key","type":"string]: any","description":"","readonly":false},{"name":"headerName","type":"string","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"headers","type":"RawAxiosHeaders | AxiosHeaders | string","description":"","readonly":false},{"name":"rewrite","type":"boolean): AxiosHeaders","description":"","readonly":false},{"name":"headerName","type":"string","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"headerName","type":"string","description":"","readonly":false},{"name":"matcher","type":"true | AxiosHeaderParser): AxiosHeaderValue","description":"","readonly":false},{"name":"header","type":"string","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"header","type":"string | string[]","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"format","type":"boolean): AxiosHeaders","description":"","readonly":false},{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","readonly":false},{"name":"asStrings","type":"boolean): RawAxiosHeaders","description":"","readonly":false},{"name":"thing","type":"AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders","description":"","readonly":false},{"name":"header","type":"string | string[]): AxiosHeaders","description":"","readonly":false},{"name":"targets","type":"Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders","description":"","readonly":false},{"name":"value","type":"ContentType","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false},{"name":"value","type":"AxiosHeaderValue","description":"","readonly":false},{"name":"rewrite","type":"boolean | AxiosHeaderMatcher): AxiosHeaders","description":"","readonly":false},{"name":"parser","type":"RegExp): RegExpExecArray | null","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): AxiosHeaderValue","description":"","readonly":false},{"name":"matcher","type":"AxiosHeaderMatcher): boolean","description":"","readonly":false}],"examples":[]},{"name":"Axios","description":"","constructor":{"name":"constructor","signature":"constructor(config?: AxiosRequestConfig): void","description":"","parameters":[{"name":"config","type":"AxiosRequestConfig","optional":true}],"returnType":"Axios","examples":[],"category":"constructor"},"methods":[],"properties":[{"name":"config","type":"AxiosRequestConfig)","description":"","readonly":false},{"name":"defaults","type":"AxiosDefaults","description":"","readonly":false},{"name":"interceptors","type":"{ request: AxiosInterceptorManager<InternalAxiosRequestConfig>","description":"","readonly":false},{"name":"response","type":"AxiosInterceptorManager<AxiosResponse>","description":"","readonly":false}],"examples":["{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional config in charge of serializing `params`\n  paramsSerializer: {\n    indexes: null // array indexes format (null - no brackets, false - empty brackets, true - brackets with indexes)\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n  \n  // syntax alternative to send data into the body\n  // method post\n  // only the value is sent, not the key\n  data: 'Country=Brasil&City=Belo Horizonte',\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  // Please note that only HTTP Basic auth is configurable through this parameter.\n  // For Bearer tokens and such, use `Authorization` custom headers instead.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n  //   browser only: 'blob'\n  responseType: 'json', // default\n\n  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)\n  // Note: Ignored for `responseType` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  // browser only\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  // browser only\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js\n  maxContentLength: 2000,\n\n  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed\n  maxBodyLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 21, // default\n\n  // `beforeRedirect` defines a function that will be called before redirect.\n  // Use this to adjust the request options upon redirecting,\n  // to inspect the latest response headers,\n  // or to cancel the request by throwing an error\n  // If maxRedirects is set to 0, `beforeRedirect` is not used.\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // `proxy` defines the hostname, port, and protocol of the proxy server.\n  // You can also define your proxy using the conventional `http_proxy` and\n  // `https_proxy` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a `no_proxy` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // If the proxy server uses HTTPS, then you must set the protocol to `https`. \n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n\n  // an alternative way to cancel Axios requests using AbortController\n  signal: new AbortController().signal,\n\n  // `decompress` indicates whether or not the response body should be decompressed \n  // automatically. If set to `true` will also remove the 'content-encoding' header \n  // from the responses objects of all decompressed responses\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n    \n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers)=> {}; // custom visitor funaction to serrialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key \n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  }\n}","let user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}"]}],"interfaces":[{"name":"RawAxiosHeaders","description":"","properties":[{"name":"key","type":"string]: AxiosHeaderValue","description":"","readonly":false}],"methods":[]},{"name":"AxiosRequestTransformer","description":"","properties":[{"name":"this","type":"InternalAxiosRequestConfig","description":"","readonly":false},{"name":"data","type":"any","description":"","readonly":false},{"name":"headers","type":"AxiosRequestHeaders): any","description":"","readonly":false}],"methods":[]},{"name":"AxiosResponseTransformer","description":"","properties":[{"name":"this","type":"InternalAxiosRequestConfig","description":"","readonly":false},{"name":"data","type":"any","description":"","readonly":false},{"name":"headers","type":"AxiosResponseHeaders","description":"","readonly":false},{"name":"status","type":"number): any","description":"","readonly":false}],"methods":[]},{"name":"AxiosAdapter","description":"","properties":[{"name":"config","type":"InternalAxiosRequestConfig): AxiosPromise","description":"","readonly":false}],"methods":[]},{"name":"AxiosBasicCredentials","description":"","properties":[{"name":"username","type":"string","description":"","readonly":false},{"name":"password","type":"string","description":"","readonly":false}],"methods":[]},{"name":"AxiosProxyConfig","description":"","properties":[{"name":"host","type":"string","description":"","readonly":false},{"name":"port","type":"number","description":"","readonly":false},{"name":"auth","type":"AxiosBasicCredentials","description":"","readonly":false},{"name":"protocol","type":"string","description":"","readonly":false}],"methods":[]},{"name":"TransitionalOptions","description":"","properties":[{"name":"silentJSONParsing","type":"boolean","description":"","readonly":false},{"name":"forcedJSONParsing","type":"boolean","description":"","readonly":false},{"name":"clarifyTimeoutError","type":"boolean","description":"","readonly":false}],"methods":[]},{"name":"GenericAbortSignal","description":"","properties":[{"name":"aborted","type":"boolean","description":"","readonly":false}],"methods":[]},{"name":"FormDataVisitorHelpers","description":"","properties":[{"name":"defaultVisitor","type":"SerializerVisitor","description":"","readonly":false}],"methods":[]},{"name":"SerializerVisitor","description":"","properties":[{"name":"this","type":"GenericFormData","description":"","readonly":false},{"name":"value","type":"any","description":"","readonly":false},{"name":"key","type":"string | number","description":"","readonly":false},{"name":"path","type":"null | Array<string | number>","description":"","readonly":false},{"name":"helpers","type":"FormDataVisitorHelpers ): boolean","description":"","readonly":false}],"methods":[]},{"name":"SerializerOptions","description":"","properties":[{"name":"visitor","type":"SerializerVisitor","description":"","readonly":false},{"name":"dots","type":"boolean","description":"","readonly":false},{"name":"metaTokens","type":"boolean","description":"","readonly":false},{"name":"indexes","type":"boolean | null","description":"","readonly":false}],"methods":[]},{"name":"FormSerializerOptions","description":"","properties":[],"methods":[]},{"name":"ParamEncoder","description":"","properties":[{"name":"value","type":"any","description":"","readonly":false}],"methods":[]},{"name":"CustomParamsSerializer","description":"","properties":[{"name":"params","type":"Record<string","description":"","readonly":false},{"name":"options","type":"ParamsSerializerOptions): string","description":"","readonly":false}],"methods":[]},{"name":"ParamsSerializerOptions","description":"","properties":[{"name":"encode","type":"ParamEncoder","description":"","readonly":false},{"name":"serialize","type":"CustomParamsSerializer","description":"","readonly":false}],"methods":[]},{"name":"AxiosProgressEvent","description":"","properties":[{"name":"loaded","type":"number","description":"","readonly":false},{"name":"total","type":"number","description":"","readonly":false},{"name":"progress","type":"number","description":"","readonly":false},{"name":"bytes","type":"number","description":"","readonly":false},{"name":"rate","type":"number","description":"","readonly":false},{"name":"estimated","type":"number","description":"","readonly":false},{"name":"upload","type":"boolean","description":"","readonly":false},{"name":"download","type":"boolean","description":"","readonly":false},{"name":"event","type":"BrowserProgressEvent","description":"","readonly":false}],"methods":[]},{"name":"LookupAddressEntry","description":"","properties":[{"name":"address","type":"string","description":"","readonly":false},{"name":"family","type":"AddressFamily","description":"","readonly":false}],"methods":[]},{"name":"HeadersDefaults","description":"","properties":[{"name":"common","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"delete","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"get","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"head","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"post","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"put","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"patch","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"options","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"purge","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"link","type":"RawAxiosRequestHeaders","description":"","readonly":false},{"name":"unlink","type":"RawAxiosRequestHeaders","description":"","readonly":false}],"methods":[]},{"name":"CancelStatic","description":"","properties":[{"name":"message","type":"string): Cancel","description":"","readonly":false}],"methods":[]},{"name":"Cancel","description":"","properties":[{"name":"message","type":"string | undefined","description":"","readonly":false}],"methods":[]},{"name":"Canceler","description":"","properties":[{"name":"message","type":"string","description":"","readonly":false},{"name":"config","type":"AxiosRequestConfig","description":"","readonly":false},{"name":"request","type":"any): void","description":"","readonly":false}],"methods":[]},{"name":"CancelTokenStatic","description":"","properties":[],"methods":[]},{"name":"CancelToken","description":"","properties":[{"name":"promise","type":"Promise<Cancel>","description":"","readonly":false},{"name":"reason","type":"Cancel","description":"","readonly":false}],"methods":[]},{"name":"CancelTokenSource","description":"","properties":[{"name":"token","type":"CancelToken","description":"","readonly":false},{"name":"cancel","type":"Canceler","description":"","readonly":false}],"methods":[]},{"name":"AxiosInterceptorOptions","description":"","properties":[{"name":"synchronous","type":"boolean","description":"","readonly":false}],"methods":[]},{"name":"AxiosInstance","description":"","properties":[{"name":"config","type":"AxiosRequestConfig<D>): Promise<R>","description":"","readonly":false},{"name":"url","type":"string","description":"","readonly":false},{"name":"config","type":"AxiosRequestConfig<D>): Promise<R>","description":"","readonly":false},{"name":"defaults","type":"Omit<AxiosDefaults","description":"","readonly":false},{"name":"headers","type":"HeadersDefaults & { [key: string]: AxiosHeaderValue","description":"","readonly":false}],"methods":[]},{"name":"GenericFormData","description":"","properties":[{"name":"name","type":"string","description":"","readonly":false},{"name":"value","type":"any","description":"","readonly":false},{"name":"options","type":"any): any","description":"","readonly":false}],"methods":[]},{"name":"GenericHTMLFormElement","description":"","properties":[{"name":"name","type":"string","description":"","readonly":false},{"name":"method","type":"string","description":"","readonly":false}],"methods":[]},{"name":"AxiosStatic","description":"","properties":[{"name":"config","type":"CreateAxiosDefaults): AxiosInstance","description":"","readonly":false},{"name":"Cancel","type":"CancelStatic","description":"","readonly":false},{"name":"CancelToken","type":"CancelTokenStatic","description":"","readonly":false},{"name":"Axios","type":"typeof Axios","description":"","readonly":false},{"name":"AxiosError","type":"typeof AxiosError","description":"","readonly":false},{"name":"HttpStatusCode","type":"typeof HttpStatusCode","description":"","readonly":false},{"name":"VERSION","type":"string","description":"","readonly":false},{"name":"isCancel","type":"typeof isCancel","description":"","readonly":false},{"name":"all","type":"typeof all","description":"","readonly":false},{"name":"spread","type":"typeof spread","description":"","readonly":false},{"name":"isAxiosError","type":"typeof isAxiosError","description":"","readonly":false},{"name":"toFormData","type":"typeof toFormData","description":"","readonly":false},{"name":"formToJSON","type":"typeof formToJSON","description":"","readonly":false},{"name":"getAdapter","type":"typeof getAdapter","description":"","readonly":false},{"name":"CanceledError","type":"typeof CanceledError","description":"","readonly":false},{"name":"AxiosHeaders","type":"typeof AxiosHeaders","description":"","readonly":false}],"methods":[]}],"types":[{"name":"AxiosHeaderValue","definition":"AxiosHeaders | string | string[] | number | boolean | null","description":"","examples":[]},{"name":"MethodsHeaders","definition":"Partial<{ [Key in Method as Lowercase<Key>]: AxiosHeaders","description":"","examples":[]},{"name":"AxiosHeaderMatcher","definition":"string | RegExp | ((this: AxiosHeaders, value: string, name: string) => boolean)","description":"","examples":[]},{"name":"AxiosHeaderParser","definition":"(this: AxiosHeaders, value: AxiosHeaderValue, header: string) => any","description":"","examples":[]},{"name":"CommonRequestHeadersList","definition":"'Accept' | 'Content-Length' | 'User-Agent' | 'Content-Encoding' | 'Authorization'","description":"","examples":[]},{"name":"ContentType","definition":"AxiosHeaderValue | 'text/html' | 'text/plain' | 'multipart/form-data' | 'application/json' | 'application/x-www-form-urlencoded' | 'application/octet-stream'","description":"","examples":[]},{"name":"RawAxiosRequestHeaders","definition":"Partial<RawAxiosHeaders & { [Key in CommonRequestHeadersList]: AxiosHeaderValue","description":"","examples":[]},{"name":"AxiosRequestHeaders","definition":"RawAxiosRequestHeaders & AxiosHeaders","description":"","examples":[]},{"name":"CommonResponseHeadersList","definition":"'Server' | 'Content-Type' | 'Content-Length' | 'Cache-Control'| 'Content-Encoding'","description":"","examples":[]},{"name":"RawCommonResponseHeaders","definition":"{ [Key in CommonResponseHeadersList]: AxiosHeaderValue","description":"","examples":[]},{"name":"RawAxiosResponseHeaders","definition":"Partial<RawAxiosHeaders & RawCommonResponseHeaders>","description":"","examples":[]},{"name":"AxiosResponseHeaders","definition":"RawAxiosResponseHeaders & AxiosHeaders","description":"","examples":[]},{"name":"Method","definition":"| 'get' | 'GET' | 'delete' | 'DELETE' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH' | 'purge' | 'PURGE' | 'link' | 'LINK' | 'unlink' | 'UNLINK'","description":"","examples":[]},{"name":"ResponseType","definition":"| 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream'","description":"","examples":[]},{"name":"responseEncoding","definition":"| 'ascii' | 'ASCII' | 'ansi' | 'ANSI' | 'binary' | 'BINARY' | 'base64' | 'BASE64' | 'base64url' | 'BASE64URL' | 'hex' | 'HEX' | 'latin1' | 'LATIN1' | 'ucs-2' | 'UCS-2' | 'ucs2' | 'UCS2' | 'utf-8' | 'UTF-8' | 'utf8' | 'UTF8' | 'utf16le' | 'UTF16LE'","description":"","examples":[]},{"name":"MaxUploadRate","definition":"number","description":"","examples":[]},{"name":"MaxDownloadRate","definition":"number","description":"","examples":[]},{"name":"BrowserProgressEvent","definition":"any","description":"","examples":[]},{"name":"Milliseconds","definition":"number","description":"","examples":[]},{"name":"AxiosAdapterName","definition":"'xhr' | 'http' | string","description":"","examples":[]},{"name":"AxiosAdapterConfig","definition":"AxiosAdapter | AxiosAdapterName","description":"","examples":[]},{"name":"AddressFamily","definition":"4 | 6 | undefined","description":"","examples":[]},{"name":"LookupAddress","definition":"string | LookupAddressEntry","description":"","examples":[]}],"constants":[{"name":"axios","type":"unknown","value":"unknown","description":""}]};
      [...apiRef.functions, ...apiRef.classes].forEach(item => {
        if (item.name.toLowerCase().includes(searchTerm) || 
            item.description.toLowerCase().includes(searchTerm)) {
          results.push({
            type: 'API Reference',
            title: item.name,
            content: item.description,
            relevance: this.calculateRelevance(item.name + ' ' + item.description, searchTerm)
          });
        }
      });
    }

    // Sort by relevance and limit results
    results.sort((a, b) => b.relevance - a.relevance);
    results = results.slice(0, limit);

    if (results.length === 0) {
      return {
        content: [
          {
            type: "text",
            text: `No documentation found matching "${query}"`
          }
        ]
      };
    }

    const response = `# Search Results for "${query}"\n\n` + 
      results.map(r => `## ${r.title} (${r.type})\n\n${r.content}`).join('\n\n');

    return {
      content: [
        {
          type: "text",
          text: response
        }
      ]
    };

    function calculateRelevance(text, term) {
      const lowerText = text.toLowerCase();
      const lowerTerm = term.toLowerCase();
      let score = 0;
      
      // Exact match in title gets highest score
      if (lowerText.startsWith(lowerTerm)) score += 10;
      
      // Count occurrences
      const matches = (lowerText.match(new RegExp(lowerTerm, 'g')) || []).length;
      score += matches * 2;
      
      return score;
    }
  }
  private async getConfigurationGuide(args: any) {
    
    const { format = 'markdown', includeExamples = true } = args;
    
    const configOptions = [];
    const installInstructions = [];
    
    let response = '';

    if (format === 'markdown') {
      response = `# Configuration Guide for axios\n\n`;
      
      if (installInstructions.length > 0) {
        response += `## Installation\n\n`;
        response += installInstructions.map(inst => `\`\`\`bash\n${inst.command}\n\`\`\``).join('\n\n');
        response += '\n\n';
      }
      
      if (configOptions.length > 0) {
        response += `## Configuration Options\n\n`;
        response += configOptions.map(opt => 
          `### ${opt.name}\n\n${opt.description}\n\n- **Type:** ${opt.type}\n- **Required:** ${opt.required ? 'Yes' : 'No'}`
        ).join('\n\n');
      } else {
        response += `## Configuration\n\nNo specific configuration options documented. Check the package documentation for setup instructions.`;
      }
    } else if (format === 'json') {
      response = JSON.stringify({
        installation: installInstructions,
        configuration: configOptions
      }, null, 2);
    } else if (format === 'typescript') {
      response = `// Configuration interface for axios\n\n`;
      if (configOptions.length > 0) {
        response += `interface axiosConfig {\n`;
        response += configOptions.map(opt => 
          `  ${opt.name}${opt.required ? '' : '?'}: ${opt.type}; // ${opt.description}`
        ).join('\n');
        response += '\n}';
      }
    }

    return {
      content: [
        {
          type: "text",
          text: response
        }
      ]
    };
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    
    console.error(`axios MCP server running on stdio`);
    console.error(`Available tools: ${["get_package_info","get_usage_examples","get_api_reference","search_package_docs","get_configuration_guide"]}`);
    console.error(`Package version: 1.6.0`);
    console.error(`Generated: 2025-08-11T12:00:39.268Z`);
  }
}

// Start the server
const server = new AxiosMCPServer();
server.run().catch((error) => {
  console.error('Failed to start MCP server:', error);
  process.exit(1);
});